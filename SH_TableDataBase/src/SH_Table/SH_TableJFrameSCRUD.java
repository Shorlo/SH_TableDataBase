package SH_Table;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shorlo
 */
public class SH_TableJFrameSCRUD extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel();
    
    /**
     * Creates new form SH_ChartJFrameSCRUD
     */
    public SH_TableJFrameSCRUD() 
    {
        initComponents();
        try
        {   
            chartProducts.setModel(model);
            
            PreparedStatement ps = null;
            ResultSet rs = null;
            
            SH_DBConnection con = new SH_DBConnection();
            Connection connection = con.getConnection();
                    
            String sql = "SELECT code, name, price, quantity FROM product";
            
            
            ps = connection.prepareStatement(sql);
            rs = ps.executeQuery();
            
            ResultSetMetaData rsMd = (ResultSetMetaData)rs.getMetaData();
            
            int numOfColumns = rsMd.getColumnCount();
            
            model.addColumn("Code");
            model.addColumn("Name");
            model.addColumn("Price");
            model.addColumn("Quantity");
            
            /**
             * Resize table view
             */
            
            int[] widths = {50, 200, 50, 50};
            
            for(int i = 0; i < chartProducts.getColumnCount(); i++)
            {
                chartProducts.getColumnModel().getColumn(i).setPreferredWidth(widths[i]);
            }

            while(rs.next())
            {
                Object[] rows = new Object[numOfColumns];
                
                for(int i = 0; i < numOfColumns; i++)
                {
                    rows[i] = rs.getObject(i+1);
                }                
                model.addRow(rows);
            }
        }
        catch (SQLException exeption)
        {
            System.err.println(exeption.toString());
        }
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chartProducts = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtCode = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chartProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        chartProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chartProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(chartProducts);

        jLabel1.setText("Code");

        jLabel2.setText("Name");

        jLabel3.setText("Price");

        jLabel4.setText("Quantity");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnModify.setText("Modify");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel5.setText("Code:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCode)
                            .addComponent(txtName)
                            .addComponent(txtPrice)
                            .addComponent(txtQuantity)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 29, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnModify)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(109, 109, 109)))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch)
                            .addComponent(jLabel5)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave)
                            .addComponent(btnModify)
                            .addComponent(btnDelete))
                        .addGap(0, 45, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chartProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chartProductsMouseClicked
        // TODO add your handling code here:
        
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        try
        {
            SH_DBConnection con = new SH_DBConnection();
            Connection connection = con.getConnection();
            
            int row = chartProducts.getSelectedRow();
            String code = chartProducts.getValueAt(row, 0).toString();
            
            ps = connection.prepareStatement("SELECT code, name, price, quantity FROM product WHERE code = ?");
            ps.setString(1, code);
            rs = ps.executeQuery();
            
            while (rs.next())
            {
                txtCode.setText(rs.getString("code"));
                txtName.setText(rs.getString("name"));
                txtPrice.setText(rs.getString("price"));
                txtQuantity.setText(rs.getString("quantity"));
            }
        }
        catch (SQLException exeption)
        {
            System.err.println(exeption.toString());
        }
         
    }//GEN-LAST:event_chartProductsMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        PreparedStatement ps = null;
        try 
        {
            SH_DBConnection con = new SH_DBConnection();
            Connection connection = con.getConnection();
            
            ps = connection.prepareStatement("INSERT INTO product (code, name, price, quantity) VALUES (?,?,?,?)");
            
            ps.setString(1, txtCode.getText());
            ps.setString(2, txtName.getText());
            ps.setString(3, txtPrice.getText());
            ps.setString(4, txtQuantity.getText());
            
            ps.execute();
            
            JOptionPane.showMessageDialog(null, "Product saved!!");
            
            Object[] rows = new Object[4];
            
            rows[0] = txtCode.getText();
            rows[1] = txtName.getText();
            rows[2] = txtPrice.getText();
            rows[3] = txtQuantity.getText();
            model.addRow(rows);
            
            clean();
        }
        catch (SQLException exception)
        {
            JOptionPane.showMessageDialog(null, "Error saveing product!!");
            System.out.println(exception);
        }
        
                
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        PreparedStatement ps = null;
        
        try
        {
            SH_DBConnection con = new SH_DBConnection();
            Connection connection = con.getConnection();
            
            int row = chartProducts.getSelectedRow();
            String code = chartProducts.getValueAt(row, 0).toString();
            
            ps = connection.prepareStatement("DELETE FROM product WHERE code = ?");
            ps.setString(1, code);
            ps.execute();
            
            model.removeRow(row);
            
            JOptionPane.showMessageDialog(null, "Product deleted!!");
            clean();
        }
        catch (SQLException exception)
        {
            JOptionPane.showMessageDialog(null, "Error deleting product!!");
            System.err.println(exception.toString());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        // TODO add your handling code here:
        int row = chartProducts.getSelectedRow();
        PreparedStatement ps = null;
        
        try 
        {
            SH_DBConnection con = new SH_DBConnection();
            Connection connection = con.getConnection();
            ps = connection.prepareStatement("UPDATE product SET name = ?, price = ?, quantity = ? WHERE code = ?");
            
            
            ps.setString(1, txtName.getText());
            ps.setString(2, txtPrice.getText());
            ps.setString(3, txtQuantity.getText());
            ps.setString(4, txtCode.getText());
            
            ps.execute();
            
            JOptionPane.showMessageDialog(null, "Product modified!!");

            chartProducts.setValueAt(txtCode.getText(), row, 0);
            chartProducts.setValueAt(txtName.getText(), row, 1);
            chartProducts.setValueAt(txtPrice.getText(), row, 2);
            chartProducts.setValueAt(txtQuantity.getText(), row, 3);
            clean();
           
        }
        catch (SQLException exception)
        {
            JOptionPane.showMessageDialog(null, "Error saveing product!!");
            System.out.println(exception);
        }
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        String field = txtSearch.getText();
        String where = "";
        
        if(!"".equals(field))
        {
            where = "WHERE code = '" + field + "'";
        }
        try
        {
            DefaultTableModel mod = new DefaultTableModel();
            chartProducts.setModel(mod);
            
            PreparedStatement ps = null;
            ResultSet rs = null;
            SH_DBConnection con = new SH_DBConnection();
            Connection connection = con.getConnection();
            
            String sql = "SELECT code, name, price, quantity FROM product " + where;
            System.out.println(sql);
            
            ps = connection.prepareStatement(sql);
            rs = ps.executeQuery();
            
            ResultSetMetaData rsMd = rs.getMetaData();
            int numOfRows = rsMd.getColumnCount();
            
            mod.addColumn("Code");
            mod.addColumn("Name");
            mod.addColumn("Price");
            mod.addColumn("Quantity");
            
            int[] widths = {50, 200, 50, 50};
            for(int i = 0; i < chartProducts.getColumnCount(); i++)
            {
                chartProducts.getColumnModel().getColumn(i).setPreferredWidth(widths[i]);
            }
            
            while (rs.next())
            {
                Object[] rows = new Object[numOfRows];
                for(int i = 0; i < numOfRows; i++)
                {
                    rows[i] = rs.getObject(i + 1);
                }
                mod.addRow(rows);
            }
        }
        catch(Exception exception)
        {
            System.err.println(exception.toString());
        }
        
        
        
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void clean() 
    {
        txtCode.setText("");
        txtName.setText("");
        txtPrice.setText("");
        txtQuantity.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SH_TableJFrameSCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SH_TableJFrameSCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SH_TableJFrameSCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SH_TableJFrameSCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SH_TableJFrameSCRUD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnDelete;
    public javax.swing.JButton btnModify;
    public javax.swing.JButton btnSave;
    public javax.swing.JButton btnSearch;
    private javax.swing.JTable chartProducts;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextField txtCode;
    public javax.swing.JTextField txtName;
    public javax.swing.JTextField txtPrice;
    public javax.swing.JTextField txtQuantity;
    public javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
